// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SANTEGSMS.DatabaseContext;

namespace SANTEGSMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210320182215_newMigration")]
    partial class newMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SANTEGSMS.Entities.AcademicSessions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TermId");

                    b.HasIndex("UserId");

                    b.ToTable("AcademicSessions");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Alumni", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateGraduated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GradeTeacherId")
                        .HasColumnType("char(36)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("GradeTeacherId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Alumni");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Assignments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastDateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ObtainableScore")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.AssignmentsSubmitted", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateGraded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateSubmitted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal?>("ObtainableScore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("ScoreObtained")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long>("ScoreStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("ScoreStatusId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.ToTable("AssignmentsSubmitted");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.AttendancePeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AttendancePeriodName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AttendancePeriod");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AttendancePeriodName = "Morning"
                        },
                        new
                        {
                            Id = 2L,
                            AttendancePeriodName = "Afternoon"
                        },
                        new
                        {
                            Id = 3L,
                            AttendancePeriodName = "Both"
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ClassAlumni", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ClassAlumni");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Category = "Alumni"
                        },
                        new
                        {
                            Id = 2L,
                            Category = "Class"
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ClassGrades", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GradeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isAssignedToTeacher")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("ClassGrades");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Classes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClassName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DistrictAdminId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DistrictName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("LocalGovtId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistrictAdminId");

                    b.HasIndex("LocalGovtId");

                    b.HasIndex("StateId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.DistrictAdministrators", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DistrictAdministrators");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.EmailConfirmationCodes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("EmailConfirmationCodes");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ErrorDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ErrorSource")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ErrorStackTrace")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("GenderName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GenderName = "Male"
                        },
                        new
                        {
                            Id = 2L,
                            GenderName = "Female"
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.GradeStudents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasGraduated")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("GradeStudents");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.GradeTeachers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("SchoolUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolUserId");

                    b.ToTable("GradeTeachers");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.LessonNotes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastDateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.ToTable("LessonNotes");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.LocalGovt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("LocalGovtName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("LocalGovt");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Parents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long?>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LocalGovt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Occupation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Religion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StateOfOrigin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("hasChild")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ParentsStudentsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.ToTable("ParentsStudentsMap");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolCampus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CampusAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CampusName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolCampus");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("SchoolRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleName = "Super Administrator"
                        },
                        new
                        {
                            Id = 2L,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = 3L,
                            RoleName = "Class Teacher"
                        },
                        new
                        {
                            Id = 4L,
                            RoleName = "Subject Teacher"
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolSubjects", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAssignedToClass")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAssignedToTeacher")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("MaximumScore")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportCardOrder")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SubjectName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolSubjects");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("SchoolTypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("SchoolType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            SchoolTypeName = "Nursery and Primary"
                        },
                        new
                        {
                            Id = 2L,
                            SchoolTypeName = "Secondary"
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolUserRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SchoolUserRoles");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long?>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolUsers");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Schools", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("LocalGovtId")
                        .HasColumnType("bigint");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SchoolLogoUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SchoolName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SchoolTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LocalGovtId");

                    b.HasIndex("SchoolTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ScoreCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ScoreCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Exam",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "CA",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Behavioural",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Extra Curricular",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ScoreCategoryConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TermId");

                    b.ToTable("ScoreCategoryConfig");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ScoreGrading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Grade")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("HighestRange")
                        .HasColumnType("bigint");

                    b.Property<long>("LowestRange")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("ScoreGrading");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ScoreStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ScoreStatusName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ScoreStatus");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ScoreStatusName = "Passed"
                        },
                        new
                        {
                            Id = 2L,
                            ScoreStatusName = "Failed"
                        },
                        new
                        {
                            Id = 3L,
                            ScoreStatusName = "Pending"
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ScoreSubCategoryConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoreObtainable")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TermId");

                    b.ToTable("ScoreSubCategoryConfig");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Sessions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("SessionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.States", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("StatusName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            StatusName = "Approved"
                        },
                        new
                        {
                            Id = 2L,
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 3L,
                            StatusName = "Declined"
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.StudentAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AdmissionNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("AttendancePeriodId")
                        .HasColumnType("bigint");

                    b.Property<long>("AttendancePeriodIdAfternoon")
                        .HasColumnType("bigint");

                    b.Property<long>("AttendancePeriodIdMorning")
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("PresentAbsent")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttendancePeriodId");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.ToTable("StudentAttendance");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.StudentDuplicates", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExistingStudentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NewStudentFullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ExistingStudentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("StudentDuplicates");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Students", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AdmissionNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAssignedToClass")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LocalGovt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Religion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("StaffStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StateOfOrigin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StudentStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("YearOfAdmission")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("hasParent")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SubjectDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SubjectDepartment");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SubjectNotes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastDateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.ToTable("SubjectNotes");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SubjectTeachers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("SchoolUserId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolUserId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectTeachers");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Teachers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAssignedSubjects")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAssignedToClass")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("SchoolUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolUserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Terms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TermName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Terms");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            TermName = "1st Term"
                        },
                        new
                        {
                            Id = 2L,
                            TermName = "2nd Term"
                        },
                        new
                        {
                            Id = 3L,
                            TermName = "3rd Term"
                        });
                });

            modelBuilder.Entity("SANTEGSMS.Entities.AcademicSessions", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Alumni", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("GradeTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Assignments", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolSubjects", "SchoolSubjects")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.AssignmentsSubmitted", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.Assignments", "Assignments")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ScoreStatus", "ScoreStatus")
                        .WithMany()
                        .HasForeignKey("ScoreStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ClassGrades", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Classes", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.District", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.DistrictAdministrators", "DistrictAdministrators")
                        .WithMany()
                        .HasForeignKey("DistrictAdminId");

                    b.HasOne("SANTEGSMS.Entities.LocalGovt", "LocalGovt")
                        .WithMany()
                        .HasForeignKey("LocalGovtId");

                    b.HasOne("SANTEGSMS.Entities.States", "States")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.GradeStudents", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.GradeTeachers", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.LessonNotes", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolSubjects", "SchoolSubjects")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.LocalGovt", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.States", "States")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Parents", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.HasOne("SANTEGSMS.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ParentsStudentsMap", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Parents", "Parents")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolCampus", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolSubjects", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SubjectDepartment", "SubjectDepartment")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolUserRoles", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolRoles", "SchoolRoles")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SchoolUsers", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Schools", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("SANTEGSMS.Entities.LocalGovt", "LocalGovt")
                        .WithMany()
                        .HasForeignKey("LocalGovtId");

                    b.HasOne("SANTEGSMS.Entities.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId");

                    b.HasOne("SANTEGSMS.Entities.States", "States")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ScoreCategoryConfig", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ScoreCategory", "ScoreCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ScoreGrading", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.ScoreSubCategoryConfig", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ScoreCategory", "ScoreCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Sessions", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.StudentAttendance", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.AttendancePeriod", "AttendancePeriod")
                        .WithMany()
                        .HasForeignKey("AttendancePeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.StudentDuplicates", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("ExistingStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Students", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.HasOne("SANTEGSMS.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SubjectDepartment", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SubjectNotes", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolSubjects", "SchoolSubjects")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SANTEGSMS.Entities.SubjectTeachers", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolSubjects", "SchoolSubjects")
                        .WithMany()
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("SANTEGSMS.Entities.Teachers", b =>
                {
                    b.HasOne("SANTEGSMS.Entities.SchoolCampus", "SchoolCampus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.Schools", "Schools")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SANTEGSMS.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
